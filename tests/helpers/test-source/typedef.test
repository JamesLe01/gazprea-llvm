// To print do std::cout << t->symbol->type->getTypeId() 
// in bottom of visitTypedefStatment in RefWalk.

//print type == 1
typedef boolean bool0;
typedef bool0 bool1;

//print type == 2
typedef character char0;
typedef char0 char1;
typedef char1 char2;

//print type == 3
typedef integer i1;
typedef i1 i2;
typedef i2 i3;
typedef i3 i4;

//print type == 4
typedef real r0;
typedef r0 r1;
typedef r1 r2;

//print type == 5
typedef string str;
typedef str str1;

//print type == 6
typedef integer interval intinterval;
typedef intinterval intinterval2;

//print type == 7
typedef boolean[3] boolVec0;
typedef boolVec0 bool1;

//print type == 8
typedef character[10] address;
typedef address sin;

//print type == 9
typedef integer[*] myvec;
typedef myvec notmyvec;

//print type == 10
typedef real[3] coordinates;
typedef coordinates coords;

//print type == 11
typedef boolean[3, *] boolGrid;
typedef boolGrid gridOfBool;

//print type == 12
typedef character[*, *] sudoku;
typedef sudoku scrabble;

//print type == 13
typedef integer[3, 3] canonical;
typedef canonical linAlg;

//print type == 14
typedef real[4, 4] tensor;
typedef tensor pytorch;

procedure main() returns integer {
 
    //use typedefs (from type = 1 .. 14)
    bool0 b = true; 
    char0 c = 'a';
    i1 i = 2;
    r0 r = 3.1415;
    str s = "is this how we declare strings?";
    intinterval vul = 1..10;

    boolVec0 bvec = [true, true, true];
    address my_address = ['4', '0', '4']; 
    myvec v = [1,2,3,4];
    coordinates crds = [1.023, 14.444, 231.3444];
    
    boolGrid BOOL_GRID = [[true], [false], [true]];
    sudoku mySudokuGame = [['a','b'],['c','d']];
    canonical indenityMatrix = [[1,0,0],[0,1,0],[0,0,1]];
    tensor THE_TENSOR = [[1.1, 1.2, 1.3, 1.4],[1.1, 1.2, 1.3, 1.4],[1.1, 1.2, 1.3, 1.4],[1.1, 1.2, 1.3, 1.4]];
}

#split_token
#split_token
