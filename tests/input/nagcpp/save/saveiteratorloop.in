procedure main() returns integer {
    /*
    // test decl using domain variable
    loop i in 1..10 {
        integer x = i; 
        loop j in 1..10 {
            integer y = j;
            i -> std_output;
            j -> std_output;
        }
    } 

    // test loop using vector literal
    loop i in [4,5,6,7], j in [1,2,3,5,8,13] {
        i -> std_output;
        j -> std_output;
    }

    '\n' -> std_output;

    // test loop using integer interval  
    integer x = 1;
    x -> std_output;
    loop i in 1..10, j in 1..10 {
        i -> std_output;
        j -> std_output;
    }

    '\n' -> std_output;
    
    // test loop using variables
    integer[6] v1 = [1,2,3,4,5,6];
    integer[6] v2 = [1,2,3,4,5,6];

    loop i in v1, j in v2 {
        i -> std_output;
        j -> std_output;
    }

    // challenge scoping
    '\n' -> std_output; 
    integer[*] v = [1,2,3];
    loop i in [1,2,3]{
        v = 0;
        i -> std_output; 
    }
    v -> std_output;

    // more scoping
    '\n' -> std_output; 
    integer x1 = 8;
    loop x1 in [1,2,3] {
        x1 -> std_output;
    }
    x1 -> std_output;

    // more scoping 
    '\n' -> std_output; 
    integer[3] vec = [1,2,3];
    integer[3] vec2 = vec;
    loop r in vec2 {
        vec = 7;
    }
    
    

    */


    '\n' -> std_output; 
    integer[3] myVec = [1,2,3];
    loop i in myVec {
        myVec = 0;
        i -> std_output;
    }
    myVec -> std_output;

    // prove block stack properly cleared
    loop x in 1..10, y in 5..7 {
        x = y;
        x -> std_output;
    }

    integer z = 0;
    loop while(z < 3) {
        z = z + 1;
    } loop while(z < 1) {

    }

    return 0;
}
